// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {}

/// Convenience overloads for operation inputs.
extension APIProtocol {
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// dev
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "http://localhost:8080",
            variables: []
        )
    }
    /// live
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "http://localhost:8081",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// The original error message provided by the system.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericErrorMessage`.
        public typealias GenericErrorMessage = Swift.String
        /// Content length
        ///
        /// - Remark: Generated from `#/components/schemas/GenericHeadersContentLength`.
        public typealias GenericHeadersContentLength = Swift.Int
        /// Total elements
        ///
        /// - Remark: Generated from `#/components/schemas/GenericListCount`.
        public typealias GenericListCount = Swift.Int
        /// Page properties
        ///
        /// - Remark: Generated from `#/components/schemas/GenericListPage`.
        public struct GenericListPage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericListPage/size`.
            public var size: Components.Schemas.GenericListPageSize
            /// - Remark: Generated from `#/components/schemas/GenericListPage/index`.
            public var index: Components.Schemas.GenericListPageIndex
            /// Creates a new `GenericListPage`.
            ///
            /// - Parameters:
            ///   - size:
            ///   - index:
            public init(
                size: Components.Schemas.GenericListPageSize,
                index: Components.Schemas.GenericListPageIndex
            ) {
                self.size = size
                self.index = index
            }
            public enum CodingKeys: String, CodingKey {
                case size
                case index
            }
        }
        /// Page size
        ///
        /// - Remark: Generated from `#/components/schemas/GenericListPageSize`.
        public typealias GenericListPageSize = Swift.Int
        /// Page index
        ///
        /// - Remark: Generated from `#/components/schemas/GenericListPageIndex`.
        public typealias GenericListPageIndex = Swift.Int
        /// Order of the list (ascending or descending).
        ///
        /// - Remark: Generated from `#/components/schemas/GenericListOrder`.
        @frozen public enum GenericListOrder: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// Value of the search term.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericListSearch`.
        public typealias GenericListSearch = Swift.String
        /// Object creation date
        ///
        /// - Remark: Generated from `#/components/schemas/GenericCreatedAt`.
        public typealias GenericCreatedAt = Foundation.Date
        /// Last update for the object
        ///
        /// - Remark: Generated from `#/components/schemas/GenericUpdatedAt`.
        public typealias GenericUpdatedAt = Foundation.Date
        /// - Remark: Generated from `#/components/schemas/GenericMethodNotAllowedError`.
        public struct GenericMethodNotAllowedError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericMethodNotAllowedError/key`.
            public var key: Components.Schemas.GenericMethodNotAllowedErrorKey
            /// - Remark: Generated from `#/components/schemas/GenericMethodNotAllowedError/message`.
            public var message: Components.Schemas.GenericErrorMessage
            /// Creates a new `GenericMethodNotAllowedError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.GenericMethodNotAllowedErrorKey,
                message: Components.Schemas.GenericErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericMethodNotAllowedErrorKey`.
        public typealias GenericMethodNotAllowedErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/GenericUnauthorizedError`.
        public struct GenericUnauthorizedError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericUnauthorizedError/key`.
            public var key: Components.Schemas.GenericUnauthorizedErrorKey
            /// - Remark: Generated from `#/components/schemas/GenericUnauthorizedError/message`.
            public var message: Components.Schemas.GenericErrorMessage
            /// Creates a new `GenericUnauthorizedError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.GenericUnauthorizedErrorKey,
                message: Components.Schemas.GenericErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// You can use this key for translation purposes.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericUnauthorizedErrorKey`.
        @frozen public enum GenericUnauthorizedErrorKey: String, Codable, Hashable, Sendable {
            case invalidUserToken = "invalidUserToken"
        }
        /// - Remark: Generated from `#/components/schemas/GenericNotAcceptableError`.
        public struct GenericNotAcceptableError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericNotAcceptableError/key`.
            public var key: Components.Schemas.GenericNotAcceptableErrorKey
            /// - Remark: Generated from `#/components/schemas/GenericNotAcceptableError/message`.
            public var message: Components.Schemas.GenericErrorMessage
            /// Creates a new `GenericNotAcceptableError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.GenericNotAcceptableErrorKey,
                message: Components.Schemas.GenericErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericNotAcceptableErrorKey`.
        public typealias GenericNotAcceptableErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/GenericUnsupportedMediaTypeError`.
        public struct GenericUnsupportedMediaTypeError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericUnsupportedMediaTypeError/key`.
            public var key: Components.Schemas.GenericUnsupportedMediaTypeErrorKey
            /// - Remark: Generated from `#/components/schemas/GenericUnsupportedMediaTypeError/message`.
            public var message: Components.Schemas.GenericErrorMessage
            /// Creates a new `GenericUnsupportedMediaTypeError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.GenericUnsupportedMediaTypeErrorKey,
                message: Components.Schemas.GenericErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// You can use this key for translation purposes.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericUnsupportedMediaTypeErrorKey`.
        public typealias GenericUnsupportedMediaTypeErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/GenericForbiddenError`.
        public struct GenericForbiddenError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericForbiddenError/key`.
            public var key: Components.Schemas.GenericForbiddenErrorKey
            /// - Remark: Generated from `#/components/schemas/GenericForbiddenError/message`.
            public var message: Components.Schemas.GenericErrorMessage
            /// Creates a new `GenericForbiddenError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.GenericForbiddenErrorKey,
                message: Components.Schemas.GenericErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericForbiddenErrorKey`.
        public typealias GenericForbiddenErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/GenericGoneError`.
        public struct GenericGoneError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericGoneError/key`.
            public var key: Components.Schemas.GenericGoneErrorKey
            /// - Remark: Generated from `#/components/schemas/GenericGoneError/message`.
            public var message: Components.Schemas.GenericErrorMessage
            /// Creates a new `GenericGoneError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.GenericGoneErrorKey,
                message: Components.Schemas.GenericErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericGoneErrorKey`.
        public typealias GenericGoneErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/GenericConflictError`.
        public struct GenericConflictError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericConflictError/key`.
            public var key: Components.Schemas.GenericConflictErrorKey
            /// - Remark: Generated from `#/components/schemas/GenericConflictError/message`.
            public var message: Components.Schemas.GenericErrorMessage
            /// Creates a new `GenericConflictError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.GenericConflictErrorKey,
                message: Components.Schemas.GenericErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericConflictErrorKey`.
        public typealias GenericConflictErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/GenericUnprocessableContentError`.
        public struct GenericUnprocessableContentError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericUnprocessableContentError/key`.
            public var key: Components.Schemas.GenericUnprocessableContentErrorKey
            /// - Remark: Generated from `#/components/schemas/GenericUnprocessableContentError/message`.
            public var message: Components.Schemas.GenericErrorMessage
            /// - Remark: Generated from `#/components/schemas/GenericUnprocessableContentError/failures`.
            public var failures: Components.Schemas.GenericUnprocessableContentErrorFailure
            /// Creates a new `GenericUnprocessableContentError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            ///   - failures:
            public init(
                key: Components.Schemas.GenericUnprocessableContentErrorKey,
                message: Components.Schemas.GenericErrorMessage,
                failures: Components.Schemas.GenericUnprocessableContentErrorFailure
            ) {
                self.key = key
                self.message = message
                self.failures = failures
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
                case failures
            }
        }
        /// You can use this key for translation purposes.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericUnprocessableContentErrorKey`.
        @frozen public enum GenericUnprocessableContentErrorKey: String, Codable, Hashable, Sendable {
            case validation = "validation"
        }
        /// - Remark: Generated from `#/components/schemas/GenericUnprocessableContentErrorFailure`.
        public typealias GenericUnprocessableContentErrorFailure = [Components.Schemas.GenericUnprocessableContentErrorFailureDetail]
        /// - Remark: Generated from `#/components/schemas/GenericUnprocessableContentErrorFailureDetail`.
        public struct GenericUnprocessableContentErrorFailureDetail: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericUnprocessableContentErrorFailureDetail/key`.
            public var key: Components.Schemas.GenericUnprocessableContentErrorFailureDetailKey
            /// - Remark: Generated from `#/components/schemas/GenericUnprocessableContentErrorFailureDetail/message`.
            public var message: Components.Schemas.GenericErrorMessage
            /// Creates a new `GenericUnprocessableContentErrorFailureDetail`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.GenericUnprocessableContentErrorFailureDetailKey,
                message: Components.Schemas.GenericErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// Related field key for the error detail.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericUnprocessableContentErrorFailureDetailKey`.
        public typealias GenericUnprocessableContentErrorFailureDetailKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/GenericNotFoundError`.
        public struct GenericNotFoundError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericNotFoundError/key`.
            public var key: Components.Schemas.GenericNotFoundErrorKey
            /// - Remark: Generated from `#/components/schemas/GenericNotFoundError/message`.
            public var message: Components.Schemas.GenericErrorMessage
            /// Creates a new `GenericNotFoundError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.GenericNotFoundErrorKey,
                message: Components.Schemas.GenericErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericNotFoundErrorKey`.
        public typealias GenericNotFoundErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/GenericBadRequestError`.
        public struct GenericBadRequestError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericBadRequestError/key`.
            public var key: Components.Schemas.GenericBadRequestErrorKey
            /// - Remark: Generated from `#/components/schemas/GenericBadRequestError/message`.
            public var message: Components.Schemas.GenericErrorMessage
            /// Creates a new `GenericBadRequestError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.GenericBadRequestErrorKey,
                message: Components.Schemas.GenericErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// You can use this key for translation purposes.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericBadRequestErrorKey`.
        @frozen public enum GenericBadRequestErrorKey: String, Codable, Hashable, Sendable {
            case missingRequestBody = "missingRequestBody"
            case invalidRequestBody = "invalidRequestBody"
        }
        /// - Remark: Generated from `#/components/schemas/GenericInternalServerErrorError`.
        public struct GenericInternalServerErrorError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GenericInternalServerErrorError/key`.
            public var key: Components.Schemas.GenericInternalServerErrorErrorKey
            /// - Remark: Generated from `#/components/schemas/GenericInternalServerErrorError/message`.
            public var message: Components.Schemas.GenericErrorMessage
            /// Creates a new `GenericInternalServerErrorError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.GenericInternalServerErrorErrorKey,
                message: Components.Schemas.GenericErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/GenericInternalServerErrorErrorKey`.
        public typealias GenericInternalServerErrorErrorKey = Swift.String
        /// Key of the system variable
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableKey`.
        public typealias SystemVariableKey = Swift.String
        /// Name of the system variable
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableName`.
        public typealias SystemVariableName = Swift.String
        /// Value of the system variable
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableValue`.
        public typealias SystemVariableValue = Swift.String
        /// Notes of the system variable
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableNotes`.
        public typealias SystemVariableNotes = Swift.String
        /// System varaible list
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableList`.
        public struct SystemVariableList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariableList/items`.
            public var items: Components.Schemas.SystemVariableListItems
            /// - Remark: Generated from `#/components/schemas/SystemVariableList/sort`.
            public var sort: Components.Schemas.SystemVariableListSort?
            /// - Remark: Generated from `#/components/schemas/SystemVariableList/order`.
            public var order: Components.Schemas.GenericListOrder?
            /// - Remark: Generated from `#/components/schemas/SystemVariableList/search`.
            public var search: Components.Schemas.GenericListSearch?
            /// - Remark: Generated from `#/components/schemas/SystemVariableList/page`.
            public var page: Components.Schemas.GenericListPage
            /// - Remark: Generated from `#/components/schemas/SystemVariableList/count`.
            public var count: Components.Schemas.GenericListCount
            /// Creates a new `SystemVariableList`.
            ///
            /// - Parameters:
            ///   - items:
            ///   - sort:
            ///   - order:
            ///   - search:
            ///   - page:
            ///   - count:
            public init(
                items: Components.Schemas.SystemVariableListItems,
                sort: Components.Schemas.SystemVariableListSort? = nil,
                order: Components.Schemas.GenericListOrder? = nil,
                search: Components.Schemas.GenericListSearch? = nil,
                page: Components.Schemas.GenericListPage,
                count: Components.Schemas.GenericListCount
            ) {
                self.items = items
                self.sort = sort
                self.order = order
                self.search = search
                self.page = page
                self.count = count
            }
            public enum CodingKeys: String, CodingKey {
                case items
                case sort
                case order
                case search
                case page
                case count
            }
        }
        /// System variable list item
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableListItem`.
        public struct SystemVariableListItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariableListItem/key`.
            public var key: Components.Schemas.SystemVariableKey
            /// - Remark: Generated from `#/components/schemas/SystemVariableListItem/value`.
            public var value: Components.Schemas.SystemVariableValue
            /// - Remark: Generated from `#/components/schemas/SystemVariableListItem/name`.
            public var name: Components.Schemas.SystemVariableName?
            /// Creates a new `SystemVariableListItem`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            ///   - name:
            public init(
                key: Components.Schemas.SystemVariableKey,
                value: Components.Schemas.SystemVariableValue,
                name: Components.Schemas.SystemVariableName? = nil
            ) {
                self.key = key
                self.value = value
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
                case name
            }
        }
        /// System variable list items
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableListItems`.
        public typealias SystemVariableListItems = [Components.Schemas.SystemVariableListItem]
        /// The sort key for the list
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableListSort`.
        @frozen public enum SystemVariableListSort: String, Codable, Hashable, Sendable {
            case key = "key"
            case name = "name"
            case value = "value"
        }
        /// - Remark: Generated from `#/components/schemas/SystemVariableReference`.
        public struct SystemVariableReference: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariableReference/key`.
            public var key: Components.Schemas.SystemVariableKey
            /// - Remark: Generated from `#/components/schemas/SystemVariableReference/value`.
            public var value: Components.Schemas.SystemVariableValue
            /// Creates a new `SystemVariableReference`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            public init(
                key: Components.Schemas.SystemVariableKey,
                value: Components.Schemas.SystemVariableValue
            ) {
                self.key = key
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemVariableDetail`.
        public struct SystemVariableDetail: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariableDetail/key`.
            public var key: Components.Schemas.SystemVariableKey
            /// - Remark: Generated from `#/components/schemas/SystemVariableDetail/value`.
            public var value: Components.Schemas.SystemVariableValue
            /// - Remark: Generated from `#/components/schemas/SystemVariableDetail/name`.
            public var name: Components.Schemas.SystemVariableName?
            /// - Remark: Generated from `#/components/schemas/SystemVariableDetail/notes`.
            public var notes: Components.Schemas.SystemVariableNotes?
            /// Creates a new `SystemVariableDetail`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemVariableKey,
                value: Components.Schemas.SystemVariableValue,
                name: Components.Schemas.SystemVariableName? = nil,
                notes: Components.Schemas.SystemVariableNotes? = nil
            ) {
                self.key = key
                self.value = value
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
                case name
                case notes
            }
        }
        /// The list of the keys to be deleted.
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableBulkDelete`.
        public typealias SystemVariableBulkDelete = [Components.Schemas.SystemVariableKey]
        /// - Remark: Generated from `#/components/schemas/SystemVariableCreate`.
        public struct SystemVariableCreate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariableCreate/key`.
            public var key: Components.Schemas.SystemVariableKey
            /// - Remark: Generated from `#/components/schemas/SystemVariableCreate/value`.
            public var value: Components.Schemas.SystemVariableValue
            /// - Remark: Generated from `#/components/schemas/SystemVariableCreate/name`.
            public var name: Components.Schemas.SystemVariableName?
            /// - Remark: Generated from `#/components/schemas/SystemVariableCreate/notes`.
            public var notes: Components.Schemas.SystemVariableNotes?
            /// Creates a new `SystemVariableCreate`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemVariableKey,
                value: Components.Schemas.SystemVariableValue,
                name: Components.Schemas.SystemVariableName? = nil,
                notes: Components.Schemas.SystemVariableNotes? = nil
            ) {
                self.key = key
                self.value = value
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
                case name
                case notes
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemVariableUpdate`.
        public struct SystemVariableUpdate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariableUpdate/key`.
            public var key: Components.Schemas.SystemVariableKey
            /// - Remark: Generated from `#/components/schemas/SystemVariableUpdate/value`.
            public var value: Components.Schemas.SystemVariableValue
            /// - Remark: Generated from `#/components/schemas/SystemVariableUpdate/name`.
            public var name: Components.Schemas.SystemVariableName?
            /// - Remark: Generated from `#/components/schemas/SystemVariableUpdate/notes`.
            public var notes: Components.Schemas.SystemVariableNotes?
            /// Creates a new `SystemVariableUpdate`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemVariableKey,
                value: Components.Schemas.SystemVariableValue,
                name: Components.Schemas.SystemVariableName? = nil,
                notes: Components.Schemas.SystemVariableNotes? = nil
            ) {
                self.key = key
                self.value = value
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
                case name
                case notes
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemVariablePatch`.
        public struct SystemVariablePatch: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariablePatch/key`.
            public var key: Components.Schemas.SystemVariableKey?
            /// - Remark: Generated from `#/components/schemas/SystemVariablePatch/value`.
            public var value: Components.Schemas.SystemVariableValue?
            /// - Remark: Generated from `#/components/schemas/SystemVariablePatch/name`.
            public var name: Components.Schemas.SystemVariableName?
            /// - Remark: Generated from `#/components/schemas/SystemVariablePatch/notes`.
            public var notes: Components.Schemas.SystemVariableNotes?
            /// Creates a new `SystemVariablePatch`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemVariableKey? = nil,
                value: Components.Schemas.SystemVariableValue? = nil,
                name: Components.Schemas.SystemVariableName? = nil,
                notes: Components.Schemas.SystemVariableNotes? = nil
            ) {
                self.key = key
                self.value = value
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
                case name
                case notes
            }
        }
        /// Key of the permission
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionKey`.
        public typealias SystemPermissionKey = Swift.String
        /// Name of the permission
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionName`.
        public typealias SystemPermissionName = Swift.String
        /// Description of the permission
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionNotes`.
        public typealias SystemPermissionNotes = Swift.String
        /// - Remark: Generated from `#/components/schemas/SystemPermissionReference`.
        public struct SystemPermissionReference: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionReference/key`.
            public var key: Components.Schemas.SystemPermissionKey
            /// - Remark: Generated from `#/components/schemas/SystemPermissionReference/name`.
            public var name: Components.Schemas.SystemPermissionName
            /// Creates a new `SystemPermissionReference`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            public init(
                key: Components.Schemas.SystemPermissionKey,
                name: Components.Schemas.SystemPermissionName
            ) {
                self.key = key
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
            }
        }
        /// Permission list
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionList`.
        public struct SystemPermissionList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionList/items`.
            public var items: Components.Schemas.SystemPermissionListItems
            /// - Remark: Generated from `#/components/schemas/SystemPermissionList/sort`.
            public var sort: Components.Schemas.SystemPermissionListSort?
            /// - Remark: Generated from `#/components/schemas/SystemPermissionList/order`.
            public var order: Components.Schemas.GenericListOrder?
            /// - Remark: Generated from `#/components/schemas/SystemPermissionList/search`.
            public var search: Components.Schemas.GenericListSearch?
            /// - Remark: Generated from `#/components/schemas/SystemPermissionList/page`.
            public var page: Components.Schemas.GenericListPage
            /// - Remark: Generated from `#/components/schemas/SystemPermissionList/count`.
            public var count: Components.Schemas.GenericListCount
            /// Creates a new `SystemPermissionList`.
            ///
            /// - Parameters:
            ///   - items:
            ///   - sort:
            ///   - order:
            ///   - search:
            ///   - page:
            ///   - count:
            public init(
                items: Components.Schemas.SystemPermissionListItems,
                sort: Components.Schemas.SystemPermissionListSort? = nil,
                order: Components.Schemas.GenericListOrder? = nil,
                search: Components.Schemas.GenericListSearch? = nil,
                page: Components.Schemas.GenericListPage,
                count: Components.Schemas.GenericListCount
            ) {
                self.items = items
                self.sort = sort
                self.order = order
                self.search = search
                self.page = page
                self.count = count
            }
            public enum CodingKeys: String, CodingKey {
                case items
                case sort
                case order
                case search
                case page
                case count
            }
        }
        /// Permission list item
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionListItem`.
        public struct SystemPermissionListItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionListItem/key`.
            public var key: Components.Schemas.SystemPermissionKey
            /// - Remark: Generated from `#/components/schemas/SystemPermissionListItem/name`.
            public var name: Components.Schemas.SystemPermissionName
            /// Creates a new `SystemPermissionListItem`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            public init(
                key: Components.Schemas.SystemPermissionKey,
                name: Components.Schemas.SystemPermissionName
            ) {
                self.key = key
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
            }
        }
        /// Permission list items
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionListItems`.
        public typealias SystemPermissionListItems = [Components.Schemas.SystemPermissionListItem]
        /// The sort key for the list
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionListSort`.
        @frozen public enum SystemPermissionListSort: String, Codable, Hashable, Sendable {
            case key = "key"
            case name = "name"
        }
        /// - Remark: Generated from `#/components/schemas/SystemPermissionDetail`.
        public struct SystemPermissionDetail: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionDetail/key`.
            public var key: Components.Schemas.SystemPermissionKey
            /// - Remark: Generated from `#/components/schemas/SystemPermissionDetail/name`.
            public var name: Components.Schemas.SystemPermissionName
            /// - Remark: Generated from `#/components/schemas/SystemPermissionDetail/notes`.
            public var notes: Components.Schemas.SystemPermissionNotes?
            /// Creates a new `SystemPermissionDetail`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemPermissionKey,
                name: Components.Schemas.SystemPermissionName,
                notes: Components.Schemas.SystemPermissionNotes? = nil
            ) {
                self.key = key
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case notes
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemPermissionCreate`.
        public struct SystemPermissionCreate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionCreate/key`.
            public var key: Components.Schemas.SystemPermissionKey
            /// - Remark: Generated from `#/components/schemas/SystemPermissionCreate/name`.
            public var name: Components.Schemas.SystemPermissionName
            /// - Remark: Generated from `#/components/schemas/SystemPermissionCreate/notes`.
            public var notes: Components.Schemas.SystemPermissionNotes?
            /// Creates a new `SystemPermissionCreate`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemPermissionKey,
                name: Components.Schemas.SystemPermissionName,
                notes: Components.Schemas.SystemPermissionNotes? = nil
            ) {
                self.key = key
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case notes
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemPermissionUpdate`.
        public struct SystemPermissionUpdate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionUpdate/key`.
            public var key: Components.Schemas.SystemPermissionKey
            /// - Remark: Generated from `#/components/schemas/SystemPermissionUpdate/name`.
            public var name: Components.Schemas.SystemPermissionName
            /// - Remark: Generated from `#/components/schemas/SystemPermissionUpdate/notes`.
            public var notes: Components.Schemas.SystemPermissionNotes?
            /// Creates a new `SystemPermissionUpdate`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemPermissionKey,
                name: Components.Schemas.SystemPermissionName,
                notes: Components.Schemas.SystemPermissionNotes? = nil
            ) {
                self.key = key
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case notes
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemPermissionPatch`.
        public struct SystemPermissionPatch: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionPatch/key`.
            public var key: Components.Schemas.SystemPermissionKey?
            /// - Remark: Generated from `#/components/schemas/SystemPermissionPatch/name`.
            public var name: Components.Schemas.SystemPermissionName?
            /// - Remark: Generated from `#/components/schemas/SystemPermissionPatch/notes`.
            public var notes: Components.Schemas.SystemPermissionNotes?
            /// Creates a new `SystemPermissionPatch`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemPermissionKey? = nil,
                name: Components.Schemas.SystemPermissionName? = nil,
                notes: Components.Schemas.SystemPermissionNotes? = nil
            ) {
                self.key = key
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case notes
            }
        }
        /// The list of the keys to be deleted.
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionBulkDelete`.
        public typealias SystemPermissionBulkDelete = [Components.Schemas.SystemPermissionKey]
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The list search value
        ///
        /// - Remark: Generated from `#/components/parameters/GenericListSearch`.
        public typealias GenericListSearch = Components.Schemas.GenericListSearch
        /// The number of items per page
        ///
        /// - Remark: Generated from `#/components/parameters/GenericListPageSize`.
        public typealias GenericListPageSize = Components.Schemas.GenericListPageSize
        /// The current page number
        ///
        /// - Remark: Generated from `#/components/parameters/GenericListPageIndex`.
        public typealias GenericListPageIndex = Components.Schemas.GenericListPageIndex
        /// Sort order parameter
        ///
        /// - Remark: Generated from `#/components/parameters/GenericListOrder`.
        public typealias GenericListOrder = Components.Schemas.GenericListOrder
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct GenericHead: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GenericHead/headers`.
            public struct Headers: Sendable, Hashable {
                /// Content length header
                ///
                /// - Remark: Generated from `#/components/responses/GenericHead/headers/Content-Length`.
                public var Content_hyphen_Length: Components.Headers.Content_hyphen_Length?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Content_hyphen_Length: Content length header
                public init(Content_hyphen_Length: Components.Headers.Content_hyphen_Length? = nil) {
                    self.Content_hyphen_Length = Content_hyphen_Length
                }
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.GenericHead.Headers
            /// Creates a new `GenericHead`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            public init(headers: Components.Responses.GenericHead.Headers = .init()) {
                self.headers = headers
            }
        }
        public struct GenericMethodNotAllowed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GenericMethodNotAllowed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GenericMethodNotAllowed/content/application\/json`.
                case json(Components.Schemas.GenericMethodNotAllowedError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.GenericMethodNotAllowedError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GenericMethodNotAllowed.Body
            /// Creates a new `GenericMethodNotAllowed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GenericMethodNotAllowed.Body) {
                self.body = body
            }
        }
        public struct GenericUnauthorized: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GenericUnauthorized/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GenericUnauthorized/content/application\/json`.
                case json(Components.Schemas.GenericUnauthorizedError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.GenericUnauthorizedError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GenericUnauthorized.Body
            /// Creates a new `GenericUnauthorized`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GenericUnauthorized.Body) {
                self.body = body
            }
        }
        public struct GenericNotAcceptable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GenericNotAcceptable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GenericNotAcceptable/content/application\/json`.
                case json(Components.Schemas.GenericNotAcceptableError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.GenericNotAcceptableError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GenericNotAcceptable.Body
            /// Creates a new `GenericNotAcceptable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GenericNotAcceptable.Body) {
                self.body = body
            }
        }
        public struct GenericNoContent: Sendable, Hashable {
            /// Creates a new `GenericNoContent`.
            public init() {}
        }
        public struct GenericUnsupportedMediaType: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GenericUnsupportedMediaType/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GenericUnsupportedMediaType/content/application\/json`.
                case json(Components.Schemas.GenericUnsupportedMediaTypeError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.GenericUnsupportedMediaTypeError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GenericUnsupportedMediaType.Body
            /// Creates a new `GenericUnsupportedMediaType`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GenericUnsupportedMediaType.Body) {
                self.body = body
            }
        }
        public struct GenericForbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GenericForbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GenericForbidden/content/application\/json`.
                case json(Components.Schemas.GenericForbiddenError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.GenericForbiddenError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GenericForbidden.Body
            /// Creates a new `GenericForbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GenericForbidden.Body) {
                self.body = body
            }
        }
        public struct GenericGone: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GenericGone/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GenericGone/content/application\/json`.
                case json(Components.Schemas.GenericGoneError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.GenericGoneError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GenericGone.Body
            /// Creates a new `GenericGone`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GenericGone.Body) {
                self.body = body
            }
        }
        public struct GenericConflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GenericConflict/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GenericConflict/content/application\/json`.
                case json(Components.Schemas.GenericConflictError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.GenericConflictError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GenericConflict.Body
            /// Creates a new `GenericConflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GenericConflict.Body) {
                self.body = body
            }
        }
        public struct GenericOk: Sendable, Hashable {
            /// Creates a new `GenericOk`.
            public init() {}
        }
        public struct GenericUnprocessableContent: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GenericUnprocessableContent/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GenericUnprocessableContent/content/application\/json`.
                case json(Components.Schemas.GenericUnprocessableContentError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.GenericUnprocessableContentError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GenericUnprocessableContent.Body
            /// Creates a new `GenericUnprocessableContent`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GenericUnprocessableContent.Body) {
                self.body = body
            }
        }
        public struct GenericNotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GenericNotFound/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GenericNotFound/content/application\/json`.
                case json(Components.Schemas.GenericNotFoundError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.GenericNotFoundError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GenericNotFound.Body
            /// Creates a new `GenericNotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GenericNotFound.Body) {
                self.body = body
            }
        }
        public struct GenericBadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GenericBadRequest/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GenericBadRequest/content/application\/json`.
                case json(Components.Schemas.GenericBadRequestError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.GenericBadRequestError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GenericBadRequest.Body
            /// Creates a new `GenericBadRequest`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GenericBadRequest.Body) {
                self.body = body
            }
        }
        public struct GenericInternalServerError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/GenericInternalServerError/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/GenericInternalServerError/content/application\/json`.
                case json(Components.Schemas.GenericInternalServerErrorError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.GenericInternalServerErrorError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.GenericInternalServerError.Body
            /// Creates a new `GenericInternalServerError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.GenericInternalServerError.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// Content length header
        ///
        /// - Remark: Generated from `#/components/headers/Content-Length`.
        public typealias Content_hyphen_Length = Components.Schemas.GenericHeadersContentLength
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {}
