// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif

/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List system variables
    ///
    /// List available system variables
    ///
    /// - Remark: HTTP `GET /system/variables`.
    /// - Remark: Generated from `#/paths//system/variables/get(listSystemVariable)`.
    func listSystemVariable(_ input: Operations.listSystemVariable.Input) async throws -> Operations.listSystemVariable.Output
    /// Create a system variable
    ///
    /// Creates a new system variable
    ///
    /// - Remark: HTTP `POST /system/variables`.
    /// - Remark: Generated from `#/paths//system/variables/post(createSystemVariable)`.
    func createSystemVariable(_ input: Operations.createSystemVariable.Input) async throws -> Operations.createSystemVariable.Output
    /// Bulk delete system variables
    ///
    /// Bulk delete system variables using identifiers
    ///
    /// - Remark: HTTP `DELETE /system/variables`.
    /// - Remark: Generated from `#/paths//system/variables/delete(bulkDeleteSystemVariable)`.
    func bulkDeleteSystemVariable(_ input: Operations.bulkDeleteSystemVariable.Input) async throws -> Operations.bulkDeleteSystemVariable.Output
    /// System variable details
    ///
    /// Get the details of a system variable
    ///
    /// - Remark: HTTP `GET /system/variables/{key}`.
    /// - Remark: Generated from `#/paths//system/variables/{key}/get(getSystemVariable)`.
    func getSystemVariable(_ input: Operations.getSystemVariable.Input) async throws -> Operations.getSystemVariable.Output
    /// Patch a system variable
    ///
    /// Patches a system variable using an identifier
    ///
    /// - Remark: HTTP `PATCH /system/variables/{key}`.
    /// - Remark: Generated from `#/paths//system/variables/{key}/patch(patchSystemVariable)`.
    func patchSystemVariable(_ input: Operations.patchSystemVariable.Input) async throws -> Operations.patchSystemVariable.Output
    /// Update a system variable
    ///
    /// Updates a system variable using an identifier
    ///
    /// - Remark: HTTP `PUT /system/variables/{key}`.
    /// - Remark: Generated from `#/paths//system/variables/{key}/put(updateSystemVariable)`.
    func updateSystemVariable(_ input: Operations.updateSystemVariable.Input) async throws -> Operations.updateSystemVariable.Output
    /// List system permissions
    ///
    /// List available system permissions
    ///
    /// - Remark: HTTP `GET /system/permissions`.
    /// - Remark: Generated from `#/paths//system/permissions/get(listSystemPermission)`.
    func listSystemPermission(_ input: Operations.listSystemPermission.Input) async throws -> Operations.listSystemPermission.Output
    /// Create a system permission
    ///
    /// Creates a new system permission
    ///
    /// - Remark: HTTP `POST /system/permissions`.
    /// - Remark: Generated from `#/paths//system/permissions/post(createSystemPermission)`.
    func createSystemPermission(_ input: Operations.createSystemPermission.Input) async throws -> Operations.createSystemPermission.Output
    /// Bulk delete system permissions
    ///
    /// Removes multiple system permissions at once
    ///
    /// - Remark: HTTP `DELETE /system/permissions`.
    /// - Remark: Generated from `#/paths//system/permissions/delete(bulkDeleteSystemPermission)`.
    func bulkDeleteSystemPermission(_ input: Operations.bulkDeleteSystemPermission.Input) async throws -> Operations.bulkDeleteSystemPermission.Output
    /// System permission details
    ///
    /// Get the details of a system permission
    ///
    /// - Remark: HTTP `GET /system/permissions/{permissionKey}`.
    /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/get(detailSystemPermission)`.
    func detailSystemPermission(_ input: Operations.detailSystemPermission.Input) async throws -> Operations.detailSystemPermission.Output
    /// Patch a System Permission
    ///
    /// Patch a given System Permission
    ///
    /// - Remark: HTTP `PATCH /system/permissions/{permissionKey}`.
    /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/patch(patchSystemPermission)`.
    func patchSystemPermission(_ input: Operations.patchSystemPermission.Input) async throws -> Operations.patchSystemPermission.Output
    /// Update a system permission
    ///
    /// Updates a system permission
    ///
    /// - Remark: HTTP `PUT /system/permissions/{permissionKey}`.
    /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/put(updateSystemPermission)`.
    func updateSystemPermission(_ input: Operations.updateSystemPermission.Input) async throws -> Operations.updateSystemPermission.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List system variables
    ///
    /// List available system variables
    ///
    /// - Remark: HTTP `GET /system/variables`.
    /// - Remark: Generated from `#/paths//system/variables/get(listSystemVariable)`.
    public func listSystemVariable(
        query: Operations.listSystemVariable.Input.Query = .init(),
        headers: Operations.listSystemVariable.Input.Headers = .init()
    ) async throws -> Operations.listSystemVariable.Output {
        try await listSystemVariable(Operations.listSystemVariable.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a system variable
    ///
    /// Creates a new system variable
    ///
    /// - Remark: HTTP `POST /system/variables`.
    /// - Remark: Generated from `#/paths//system/variables/post(createSystemVariable)`.
    public func createSystemVariable(
        headers: Operations.createSystemVariable.Input.Headers = .init(),
        body: Operations.createSystemVariable.Input.Body
    ) async throws -> Operations.createSystemVariable.Output {
        try await createSystemVariable(Operations.createSystemVariable.Input(
            headers: headers,
            body: body
        ))
    }
    /// Bulk delete system variables
    ///
    /// Bulk delete system variables using identifiers
    ///
    /// - Remark: HTTP `DELETE /system/variables`.
    /// - Remark: Generated from `#/paths//system/variables/delete(bulkDeleteSystemVariable)`.
    public func bulkDeleteSystemVariable(
        headers: Operations.bulkDeleteSystemVariable.Input.Headers = .init(),
        body: Operations.bulkDeleteSystemVariable.Input.Body
    ) async throws -> Operations.bulkDeleteSystemVariable.Output {
        try await bulkDeleteSystemVariable(Operations.bulkDeleteSystemVariable.Input(
            headers: headers,
            body: body
        ))
    }
    /// System variable details
    ///
    /// Get the details of a system variable
    ///
    /// - Remark: HTTP `GET /system/variables/{key}`.
    /// - Remark: Generated from `#/paths//system/variables/{key}/get(getSystemVariable)`.
    public func getSystemVariable(
        path: Operations.getSystemVariable.Input.Path,
        headers: Operations.getSystemVariable.Input.Headers = .init()
    ) async throws -> Operations.getSystemVariable.Output {
        try await getSystemVariable(Operations.getSystemVariable.Input(
            path: path,
            headers: headers
        ))
    }
    /// Patch a system variable
    ///
    /// Patches a system variable using an identifier
    ///
    /// - Remark: HTTP `PATCH /system/variables/{key}`.
    /// - Remark: Generated from `#/paths//system/variables/{key}/patch(patchSystemVariable)`.
    public func patchSystemVariable(
        path: Operations.patchSystemVariable.Input.Path,
        headers: Operations.patchSystemVariable.Input.Headers = .init(),
        body: Operations.patchSystemVariable.Input.Body
    ) async throws -> Operations.patchSystemVariable.Output {
        try await patchSystemVariable(Operations.patchSystemVariable.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Update a system variable
    ///
    /// Updates a system variable using an identifier
    ///
    /// - Remark: HTTP `PUT /system/variables/{key}`.
    /// - Remark: Generated from `#/paths//system/variables/{key}/put(updateSystemVariable)`.
    public func updateSystemVariable(
        path: Operations.updateSystemVariable.Input.Path,
        headers: Operations.updateSystemVariable.Input.Headers = .init(),
        body: Operations.updateSystemVariable.Input.Body
    ) async throws -> Operations.updateSystemVariable.Output {
        try await updateSystemVariable(Operations.updateSystemVariable.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List system permissions
    ///
    /// List available system permissions
    ///
    /// - Remark: HTTP `GET /system/permissions`.
    /// - Remark: Generated from `#/paths//system/permissions/get(listSystemPermission)`.
    public func listSystemPermission(
        query: Operations.listSystemPermission.Input.Query = .init(),
        headers: Operations.listSystemPermission.Input.Headers = .init()
    ) async throws -> Operations.listSystemPermission.Output {
        try await listSystemPermission(Operations.listSystemPermission.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a system permission
    ///
    /// Creates a new system permission
    ///
    /// - Remark: HTTP `POST /system/permissions`.
    /// - Remark: Generated from `#/paths//system/permissions/post(createSystemPermission)`.
    public func createSystemPermission(
        headers: Operations.createSystemPermission.Input.Headers = .init(),
        body: Operations.createSystemPermission.Input.Body
    ) async throws -> Operations.createSystemPermission.Output {
        try await createSystemPermission(Operations.createSystemPermission.Input(
            headers: headers,
            body: body
        ))
    }
    /// Bulk delete system permissions
    ///
    /// Removes multiple system permissions at once
    ///
    /// - Remark: HTTP `DELETE /system/permissions`.
    /// - Remark: Generated from `#/paths//system/permissions/delete(bulkDeleteSystemPermission)`.
    public func bulkDeleteSystemPermission(
        headers: Operations.bulkDeleteSystemPermission.Input.Headers = .init(),
        body: Operations.bulkDeleteSystemPermission.Input.Body
    ) async throws -> Operations.bulkDeleteSystemPermission.Output {
        try await bulkDeleteSystemPermission(Operations.bulkDeleteSystemPermission.Input(
            headers: headers,
            body: body
        ))
    }
    /// System permission details
    ///
    /// Get the details of a system permission
    ///
    /// - Remark: HTTP `GET /system/permissions/{permissionKey}`.
    /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/get(detailSystemPermission)`.
    public func detailSystemPermission(
        path: Operations.detailSystemPermission.Input.Path,
        headers: Operations.detailSystemPermission.Input.Headers = .init()
    ) async throws -> Operations.detailSystemPermission.Output {
        try await detailSystemPermission(Operations.detailSystemPermission.Input(
            path: path,
            headers: headers
        ))
    }
    /// Patch a System Permission
    ///
    /// Patch a given System Permission
    ///
    /// - Remark: HTTP `PATCH /system/permissions/{permissionKey}`.
    /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/patch(patchSystemPermission)`.
    public func patchSystemPermission(
        path: Operations.patchSystemPermission.Input.Path,
        headers: Operations.patchSystemPermission.Input.Headers = .init(),
        body: Operations.patchSystemPermission.Input.Body
    ) async throws -> Operations.patchSystemPermission.Output {
        try await patchSystemPermission(Operations.patchSystemPermission.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Update a system permission
    ///
    /// Updates a system permission
    ///
    /// - Remark: HTTP `PUT /system/permissions/{permissionKey}`.
    /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/put(updateSystemPermission)`.
    public func updateSystemPermission(
        path: Operations.updateSystemPermission.Input.Path,
        headers: Operations.updateSystemPermission.Input.Headers = .init(),
        body: Operations.updateSystemPermission.Input.Body
    ) async throws -> Operations.updateSystemPermission.Output {
        try await updateSystemPermission(Operations.updateSystemPermission.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// dev
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "http://localhost:8080",
            variables: []
        )
    }
    /// live
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "http://localhost:8081",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnsupportedMediaTypeError`.
        public struct FeatherCoreUnsupportedMediaTypeError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnsupportedMediaTypeError/key`.
            public var key: Components.Schemas.FeatherCoreUnsupportedMediaTypeErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnsupportedMediaTypeError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreUnsupportedMediaTypeError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreUnsupportedMediaTypeErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// You can use this key for translation purposes.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnsupportedMediaTypeErrorKey`.
        public typealias FeatherCoreUnsupportedMediaTypeErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreInternalServerErrorError`.
        public struct FeatherCoreInternalServerErrorError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreInternalServerErrorError/key`.
            public var key: Components.Schemas.FeatherCoreInternalServerErrorErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreInternalServerErrorError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreInternalServerErrorError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreInternalServerErrorErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreInternalServerErrorErrorKey`.
        public typealias FeatherCoreInternalServerErrorErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreGoneError`.
        public struct FeatherCoreGoneError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreGoneError/key`.
            public var key: Components.Schemas.FeatherCoreGoneErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreGoneError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreGoneError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreGoneErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreGoneErrorKey`.
        public typealias FeatherCoreGoneErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreNotAcceptableError`.
        public struct FeatherCoreNotAcceptableError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreNotAcceptableError/key`.
            public var key: Components.Schemas.FeatherCoreNotAcceptableErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreNotAcceptableError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreNotAcceptableError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreNotAcceptableErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreNotAcceptableErrorKey`.
        public typealias FeatherCoreNotAcceptableErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreMethodNotAllowedError`.
        public struct FeatherCoreMethodNotAllowedError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreMethodNotAllowedError/key`.
            public var key: Components.Schemas.FeatherCoreMethodNotAllowedErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreMethodNotAllowedError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreMethodNotAllowedError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreMethodNotAllowedErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreMethodNotAllowedErrorKey`.
        public typealias FeatherCoreMethodNotAllowedErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreNotFoundError`.
        public struct FeatherCoreNotFoundError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreNotFoundError/key`.
            public var key: Components.Schemas.FeatherCoreNotFoundErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreNotFoundError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreNotFoundError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreNotFoundErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreNotFoundErrorKey`.
        public typealias FeatherCoreNotFoundErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreBadRequestError`.
        public struct FeatherCoreBadRequestError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreBadRequestError/key`.
            public var key: Components.Schemas.FeatherCoreBadRequestErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreBadRequestError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreBadRequestError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreBadRequestErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// You can use this key for translation purposes.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreBadRequestErrorKey`.
        @frozen public enum FeatherCoreBadRequestErrorKey: String, Codable, Hashable, Sendable {
            case missingRequestBody = "missingRequestBody"
            case invalidRequestBody = "invalidRequestBody"
        }
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentError`.
        public struct FeatherCoreUnprocessableContentError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentError/key`.
            public var key: Components.Schemas.FeatherCoreUnprocessableContentErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentError/failures`.
            public var failures: Components.Schemas.FeatherCoreUnprocessableContentErrorFailure
            /// Creates a new `FeatherCoreUnprocessableContentError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            ///   - failures:
            public init(
                key: Components.Schemas.FeatherCoreUnprocessableContentErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage,
                failures: Components.Schemas.FeatherCoreUnprocessableContentErrorFailure
            ) {
                self.key = key
                self.message = message
                self.failures = failures
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
                case failures
            }
        }
        /// You can use this key for translation purposes.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentErrorKey`.
        @frozen public enum FeatherCoreUnprocessableContentErrorKey: String, Codable, Hashable, Sendable {
            case validation = "validation"
        }
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentErrorFailure`.
        public typealias FeatherCoreUnprocessableContentErrorFailure = [Components.Schemas.FeatherCoreUnprocessableContentErrorFailureDetail]
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentErrorFailureDetail`.
        public struct FeatherCoreUnprocessableContentErrorFailureDetail: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentErrorFailureDetail/key`.
            public var key: Components.Schemas.FeatherCoreUnprocessableContentErrorFailureDetailKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentErrorFailureDetail/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreUnprocessableContentErrorFailureDetail`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreUnprocessableContentErrorFailureDetailKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// Related field key for the error detail.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnprocessableContentErrorFailureDetailKey`.
        public typealias FeatherCoreUnprocessableContentErrorFailureDetailKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnauthorizedError`.
        public struct FeatherCoreUnauthorizedError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnauthorizedError/key`.
            public var key: Components.Schemas.FeatherCoreUnauthorizedErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreUnauthorizedError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreUnauthorizedError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreUnauthorizedErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// You can use this key for translation purposes.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUnauthorizedErrorKey`.
        @frozen public enum FeatherCoreUnauthorizedErrorKey: String, Codable, Hashable, Sendable {
            case invalidUserToken = "invalidUserToken"
        }
        /// - Remark: Generated from `#/components/schemas/FeatherCoreConflictError`.
        public struct FeatherCoreConflictError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreConflictError/key`.
            public var key: Components.Schemas.FeatherCoreConflictErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreConflictError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreConflictError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreConflictErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreConflictErrorKey`.
        public typealias FeatherCoreConflictErrorKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/FeatherCoreForbiddenError`.
        public struct FeatherCoreForbiddenError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreForbiddenError/key`.
            public var key: Components.Schemas.FeatherCoreForbiddenErrorKey
            /// - Remark: Generated from `#/components/schemas/FeatherCoreForbiddenError/message`.
            public var message: Components.Schemas.FeatherCoreErrorMessage
            /// Creates a new `FeatherCoreForbiddenError`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - message:
            public init(
                key: Components.Schemas.FeatherCoreForbiddenErrorKey,
                message: Components.Schemas.FeatherCoreErrorMessage
            ) {
                self.key = key
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case message
            }
        }
        /// The system key of the related object.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreForbiddenErrorKey`.
        public typealias FeatherCoreForbiddenErrorKey = Swift.String
        /// The original error message provided by the system.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreErrorMessage`.
        public typealias FeatherCoreErrorMessage = Swift.String
        /// Content length
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreHeadersContentLength`.
        public typealias FeatherCoreHeadersContentLength = Swift.Int
        /// Total elements
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreListCount`.
        public typealias FeatherCoreListCount = Swift.Int
        /// Page properties
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreListPage`.
        public struct FeatherCoreListPage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FeatherCoreListPage/size`.
            public var size: Components.Schemas.FeatherCoreListPageSize
            /// - Remark: Generated from `#/components/schemas/FeatherCoreListPage/index`.
            public var index: Components.Schemas.FeatherCoreListPageIndex
            /// Creates a new `FeatherCoreListPage`.
            ///
            /// - Parameters:
            ///   - size:
            ///   - index:
            public init(
                size: Components.Schemas.FeatherCoreListPageSize,
                index: Components.Schemas.FeatherCoreListPageIndex
            ) {
                self.size = size
                self.index = index
            }
            public enum CodingKeys: String, CodingKey {
                case size
                case index
            }
        }
        /// Page size
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreListPageSize`.
        public typealias FeatherCoreListPageSize = Swift.Int
        /// Page index
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreListPageIndex`.
        public typealias FeatherCoreListPageIndex = Swift.Int
        /// Order of the list (ascending or descending).
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreListOrder`.
        @frozen public enum FeatherCoreListOrder: String, Codable, Hashable, Sendable {
            case asc = "asc"
            case desc = "desc"
        }
        /// Value of the search term.
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreListSearch`.
        public typealias FeatherCoreListSearch = Swift.String
        /// Object creation date
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreCreatedAt`.
        public typealias FeatherCoreCreatedAt = Foundation.Date
        /// Last update for the object
        ///
        /// - Remark: Generated from `#/components/schemas/FeatherCoreUpdatedAt`.
        public typealias FeatherCoreUpdatedAt = Foundation.Date
        /// Key of the system variable
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableKey`.
        public typealias SystemVariableKey = Swift.String
        /// Name of the system variable
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableName`.
        public typealias SystemVariableName = Swift.String
        /// Value of the system variable
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableValue`.
        public typealias SystemVariableValue = Swift.String
        /// Notes of the system variable
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableNotes`.
        public typealias SystemVariableNotes = Swift.String
        /// System varaible list
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableList`.
        public struct SystemVariableList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariableList/items`.
            public var items: Components.Schemas.SystemVariableListItems
            /// - Remark: Generated from `#/components/schemas/SystemVariableList/sort`.
            public var sort: Components.Schemas.SystemVariableListSort?
            /// - Remark: Generated from `#/components/schemas/SystemVariableList/order`.
            public var order: Components.Schemas.FeatherCoreListOrder?
            /// - Remark: Generated from `#/components/schemas/SystemVariableList/search`.
            public var search: Components.Schemas.FeatherCoreListSearch?
            /// - Remark: Generated from `#/components/schemas/SystemVariableList/page`.
            public var page: Components.Schemas.FeatherCoreListPage
            /// - Remark: Generated from `#/components/schemas/SystemVariableList/count`.
            public var count: Components.Schemas.FeatherCoreListCount
            /// Creates a new `SystemVariableList`.
            ///
            /// - Parameters:
            ///   - items:
            ///   - sort:
            ///   - order:
            ///   - search:
            ///   - page:
            ///   - count:
            public init(
                items: Components.Schemas.SystemVariableListItems,
                sort: Components.Schemas.SystemVariableListSort? = nil,
                order: Components.Schemas.FeatherCoreListOrder? = nil,
                search: Components.Schemas.FeatherCoreListSearch? = nil,
                page: Components.Schemas.FeatherCoreListPage,
                count: Components.Schemas.FeatherCoreListCount
            ) {
                self.items = items
                self.sort = sort
                self.order = order
                self.search = search
                self.page = page
                self.count = count
            }
            public enum CodingKeys: String, CodingKey {
                case items
                case sort
                case order
                case search
                case page
                case count
            }
        }
        /// System variable list item
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableListItem`.
        public struct SystemVariableListItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariableListItem/key`.
            public var key: Components.Schemas.SystemVariableKey
            /// - Remark: Generated from `#/components/schemas/SystemVariableListItem/value`.
            public var value: Components.Schemas.SystemVariableValue
            /// - Remark: Generated from `#/components/schemas/SystemVariableListItem/name`.
            public var name: Components.Schemas.SystemVariableName?
            /// Creates a new `SystemVariableListItem`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            ///   - name:
            public init(
                key: Components.Schemas.SystemVariableKey,
                value: Components.Schemas.SystemVariableValue,
                name: Components.Schemas.SystemVariableName? = nil
            ) {
                self.key = key
                self.value = value
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
                case name
            }
        }
        /// System variable list items
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableListItems`.
        public typealias SystemVariableListItems = [Components.Schemas.SystemVariableListItem]
        /// The sort key for the list
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableListSort`.
        @frozen public enum SystemVariableListSort: String, Codable, Hashable, Sendable {
            case key = "key"
            case name = "name"
            case value = "value"
        }
        /// - Remark: Generated from `#/components/schemas/SystemVariableReference`.
        public struct SystemVariableReference: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariableReference/key`.
            public var key: Components.Schemas.SystemVariableKey
            /// - Remark: Generated from `#/components/schemas/SystemVariableReference/value`.
            public var value: Components.Schemas.SystemVariableValue
            /// Creates a new `SystemVariableReference`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            public init(
                key: Components.Schemas.SystemVariableKey,
                value: Components.Schemas.SystemVariableValue
            ) {
                self.key = key
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemVariableDetail`.
        public struct SystemVariableDetail: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariableDetail/key`.
            public var key: Components.Schemas.SystemVariableKey
            /// - Remark: Generated from `#/components/schemas/SystemVariableDetail/value`.
            public var value: Components.Schemas.SystemVariableValue
            /// - Remark: Generated from `#/components/schemas/SystemVariableDetail/name`.
            public var name: Components.Schemas.SystemVariableName?
            /// - Remark: Generated from `#/components/schemas/SystemVariableDetail/notes`.
            public var notes: Components.Schemas.SystemVariableNotes?
            /// Creates a new `SystemVariableDetail`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemVariableKey,
                value: Components.Schemas.SystemVariableValue,
                name: Components.Schemas.SystemVariableName? = nil,
                notes: Components.Schemas.SystemVariableNotes? = nil
            ) {
                self.key = key
                self.value = value
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
                case name
                case notes
            }
        }
        /// The list of the keys to be deleted.
        ///
        /// - Remark: Generated from `#/components/schemas/SystemVariableBulkDelete`.
        public typealias SystemVariableBulkDelete = [Components.Schemas.SystemVariableKey]
        /// - Remark: Generated from `#/components/schemas/SystemVariableCreate`.
        public struct SystemVariableCreate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariableCreate/key`.
            public var key: Components.Schemas.SystemVariableKey
            /// - Remark: Generated from `#/components/schemas/SystemVariableCreate/value`.
            public var value: Components.Schemas.SystemVariableValue
            /// - Remark: Generated from `#/components/schemas/SystemVariableCreate/name`.
            public var name: Components.Schemas.SystemVariableName?
            /// - Remark: Generated from `#/components/schemas/SystemVariableCreate/notes`.
            public var notes: Components.Schemas.SystemVariableNotes?
            /// Creates a new `SystemVariableCreate`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemVariableKey,
                value: Components.Schemas.SystemVariableValue,
                name: Components.Schemas.SystemVariableName? = nil,
                notes: Components.Schemas.SystemVariableNotes? = nil
            ) {
                self.key = key
                self.value = value
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
                case name
                case notes
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemVariableUpdate`.
        public struct SystemVariableUpdate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariableUpdate/key`.
            public var key: Components.Schemas.SystemVariableKey
            /// - Remark: Generated from `#/components/schemas/SystemVariableUpdate/value`.
            public var value: Components.Schemas.SystemVariableValue
            /// - Remark: Generated from `#/components/schemas/SystemVariableUpdate/name`.
            public var name: Components.Schemas.SystemVariableName?
            /// - Remark: Generated from `#/components/schemas/SystemVariableUpdate/notes`.
            public var notes: Components.Schemas.SystemVariableNotes?
            /// Creates a new `SystemVariableUpdate`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemVariableKey,
                value: Components.Schemas.SystemVariableValue,
                name: Components.Schemas.SystemVariableName? = nil,
                notes: Components.Schemas.SystemVariableNotes? = nil
            ) {
                self.key = key
                self.value = value
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
                case name
                case notes
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemVariablePatch`.
        public struct SystemVariablePatch: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemVariablePatch/key`.
            public var key: Components.Schemas.SystemVariableKey?
            /// - Remark: Generated from `#/components/schemas/SystemVariablePatch/value`.
            public var value: Components.Schemas.SystemVariableValue?
            /// - Remark: Generated from `#/components/schemas/SystemVariablePatch/name`.
            public var name: Components.Schemas.SystemVariableName?
            /// - Remark: Generated from `#/components/schemas/SystemVariablePatch/notes`.
            public var notes: Components.Schemas.SystemVariableNotes?
            /// Creates a new `SystemVariablePatch`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemVariableKey? = nil,
                value: Components.Schemas.SystemVariableValue? = nil,
                name: Components.Schemas.SystemVariableName? = nil,
                notes: Components.Schemas.SystemVariableNotes? = nil
            ) {
                self.key = key
                self.value = value
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
                case name
                case notes
            }
        }
        /// Key of the permission
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionKey`.
        public typealias SystemPermissionKey = Swift.String
        /// Name of the permission
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionName`.
        public typealias SystemPermissionName = Swift.String
        /// Description of the permission
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionNotes`.
        public typealias SystemPermissionNotes = Swift.String
        /// - Remark: Generated from `#/components/schemas/SystemPermissionReference`.
        public struct SystemPermissionReference: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionReference/key`.
            public var key: Components.Schemas.SystemPermissionKey
            /// - Remark: Generated from `#/components/schemas/SystemPermissionReference/name`.
            public var name: Components.Schemas.SystemPermissionName
            /// Creates a new `SystemPermissionReference`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            public init(
                key: Components.Schemas.SystemPermissionKey,
                name: Components.Schemas.SystemPermissionName
            ) {
                self.key = key
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
            }
        }
        /// Permission list
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionList`.
        public struct SystemPermissionList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionList/items`.
            public var items: Components.Schemas.SystemPermissionListItems
            /// - Remark: Generated from `#/components/schemas/SystemPermissionList/sort`.
            public var sort: Components.Schemas.SystemPermissionListSort?
            /// - Remark: Generated from `#/components/schemas/SystemPermissionList/order`.
            public var order: Components.Schemas.FeatherCoreListOrder?
            /// - Remark: Generated from `#/components/schemas/SystemPermissionList/search`.
            public var search: Components.Schemas.FeatherCoreListSearch?
            /// - Remark: Generated from `#/components/schemas/SystemPermissionList/page`.
            public var page: Components.Schemas.FeatherCoreListPage
            /// - Remark: Generated from `#/components/schemas/SystemPermissionList/count`.
            public var count: Components.Schemas.FeatherCoreListCount
            /// Creates a new `SystemPermissionList`.
            ///
            /// - Parameters:
            ///   - items:
            ///   - sort:
            ///   - order:
            ///   - search:
            ///   - page:
            ///   - count:
            public init(
                items: Components.Schemas.SystemPermissionListItems,
                sort: Components.Schemas.SystemPermissionListSort? = nil,
                order: Components.Schemas.FeatherCoreListOrder? = nil,
                search: Components.Schemas.FeatherCoreListSearch? = nil,
                page: Components.Schemas.FeatherCoreListPage,
                count: Components.Schemas.FeatherCoreListCount
            ) {
                self.items = items
                self.sort = sort
                self.order = order
                self.search = search
                self.page = page
                self.count = count
            }
            public enum CodingKeys: String, CodingKey {
                case items
                case sort
                case order
                case search
                case page
                case count
            }
        }
        /// Permission list item
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionListItem`.
        public struct SystemPermissionListItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionListItem/key`.
            public var key: Components.Schemas.SystemPermissionKey
            /// - Remark: Generated from `#/components/schemas/SystemPermissionListItem/name`.
            public var name: Components.Schemas.SystemPermissionName
            /// Creates a new `SystemPermissionListItem`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            public init(
                key: Components.Schemas.SystemPermissionKey,
                name: Components.Schemas.SystemPermissionName
            ) {
                self.key = key
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
            }
        }
        /// Permission list items
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionListItems`.
        public typealias SystemPermissionListItems = [Components.Schemas.SystemPermissionListItem]
        /// The sort key for the list
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionListSort`.
        @frozen public enum SystemPermissionListSort: String, Codable, Hashable, Sendable {
            case key = "key"
            case name = "name"
        }
        /// - Remark: Generated from `#/components/schemas/SystemPermissionDetail`.
        public struct SystemPermissionDetail: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionDetail/key`.
            public var key: Components.Schemas.SystemPermissionKey
            /// - Remark: Generated from `#/components/schemas/SystemPermissionDetail/name`.
            public var name: Components.Schemas.SystemPermissionName
            /// - Remark: Generated from `#/components/schemas/SystemPermissionDetail/notes`.
            public var notes: Components.Schemas.SystemPermissionNotes?
            /// Creates a new `SystemPermissionDetail`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemPermissionKey,
                name: Components.Schemas.SystemPermissionName,
                notes: Components.Schemas.SystemPermissionNotes? = nil
            ) {
                self.key = key
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case notes
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemPermissionCreate`.
        public struct SystemPermissionCreate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionCreate/key`.
            public var key: Components.Schemas.SystemPermissionKey
            /// - Remark: Generated from `#/components/schemas/SystemPermissionCreate/name`.
            public var name: Components.Schemas.SystemPermissionName
            /// - Remark: Generated from `#/components/schemas/SystemPermissionCreate/notes`.
            public var notes: Components.Schemas.SystemPermissionNotes?
            /// Creates a new `SystemPermissionCreate`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemPermissionKey,
                name: Components.Schemas.SystemPermissionName,
                notes: Components.Schemas.SystemPermissionNotes? = nil
            ) {
                self.key = key
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case notes
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemPermissionUpdate`.
        public struct SystemPermissionUpdate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionUpdate/key`.
            public var key: Components.Schemas.SystemPermissionKey
            /// - Remark: Generated from `#/components/schemas/SystemPermissionUpdate/name`.
            public var name: Components.Schemas.SystemPermissionName
            /// - Remark: Generated from `#/components/schemas/SystemPermissionUpdate/notes`.
            public var notes: Components.Schemas.SystemPermissionNotes?
            /// Creates a new `SystemPermissionUpdate`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemPermissionKey,
                name: Components.Schemas.SystemPermissionName,
                notes: Components.Schemas.SystemPermissionNotes? = nil
            ) {
                self.key = key
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case notes
            }
        }
        /// - Remark: Generated from `#/components/schemas/SystemPermissionPatch`.
        public struct SystemPermissionPatch: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SystemPermissionPatch/key`.
            public var key: Components.Schemas.SystemPermissionKey?
            /// - Remark: Generated from `#/components/schemas/SystemPermissionPatch/name`.
            public var name: Components.Schemas.SystemPermissionName?
            /// - Remark: Generated from `#/components/schemas/SystemPermissionPatch/notes`.
            public var notes: Components.Schemas.SystemPermissionNotes?
            /// Creates a new `SystemPermissionPatch`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - notes:
            public init(
                key: Components.Schemas.SystemPermissionKey? = nil,
                name: Components.Schemas.SystemPermissionName? = nil,
                notes: Components.Schemas.SystemPermissionNotes? = nil
            ) {
                self.key = key
                self.name = name
                self.notes = notes
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case name
                case notes
            }
        }
        /// The list of the keys to be deleted.
        ///
        /// - Remark: Generated from `#/components/schemas/SystemPermissionBulkDelete`.
        public typealias SystemPermissionBulkDelete = [Components.Schemas.SystemPermissionKey]
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// The list search value
        ///
        /// - Remark: Generated from `#/components/parameters/FeatherCoreListSearch`.
        public typealias FeatherCoreListSearch = Components.Schemas.FeatherCoreListSearch
        /// The number of items per page
        ///
        /// - Remark: Generated from `#/components/parameters/FeatherCoreListPageSize`.
        public typealias FeatherCoreListPageSize = Components.Schemas.FeatherCoreListPageSize
        /// The current page number
        ///
        /// - Remark: Generated from `#/components/parameters/FeatherCoreListPageIndex`.
        public typealias FeatherCoreListPageIndex = Components.Schemas.FeatherCoreListPageIndex
        /// Sort order parameter
        ///
        /// - Remark: Generated from `#/components/parameters/FeatherCoreListOrder`.
        public typealias FeatherCoreListOrder = Components.Schemas.FeatherCoreListOrder
        /// System variable key
        ///
        /// - Remark: Generated from `#/components/parameters/SystemVariableKey`.
        public typealias SystemVariableKey = Components.Schemas.SystemVariableKey
        /// Sort by parameter
        ///
        /// - Remark: Generated from `#/components/parameters/SystemVariableListSort`.
        public typealias SystemVariableListSort = Components.Schemas.SystemVariableListSort
        /// System permission key
        ///
        /// - Remark: Generated from `#/components/parameters/SystemPermissionKey`.
        public typealias SystemPermissionKey = Components.Schemas.SystemPermissionKey
        /// Sort by parameter
        ///
        /// - Remark: Generated from `#/components/parameters/SystemPermissionListSort`.
        public typealias SystemPermissionListSort = Components.Schemas.SystemPermissionListSort
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {
        /// - Remark: Generated from `#/components/requestBodies/SystemVariableCreate`.
        @frozen public enum SystemVariableCreate: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/SystemVariableCreate/content/application\/json`.
            case json(Components.Schemas.SystemVariableCreate)
        }
        /// - Remark: Generated from `#/components/requestBodies/SystemVariableBulkDelete`.
        @frozen public enum SystemVariableBulkDelete: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/SystemVariableBulkDelete/content/application\/json`.
            case json(Components.Schemas.SystemVariableBulkDelete)
        }
        /// - Remark: Generated from `#/components/requestBodies/SystemVariableUpdate`.
        @frozen public enum SystemVariableUpdate: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/SystemVariableUpdate/content/application\/json`.
            case json(Components.Schemas.SystemVariableUpdate)
        }
        /// - Remark: Generated from `#/components/requestBodies/SystemVariablePatch`.
        @frozen public enum SystemVariablePatch: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/SystemVariablePatch/content/application\/json`.
            case json(Components.Schemas.SystemVariablePatch)
        }
        /// - Remark: Generated from `#/components/requestBodies/SystemPermissionCreate`.
        @frozen public enum SystemPermissionCreate: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/SystemPermissionCreate/content/application\/json`.
            case json(Components.Schemas.SystemPermissionCreate)
        }
        /// - Remark: Generated from `#/components/requestBodies/SystemPermissionBulkDelete`.
        @frozen public enum SystemPermissionBulkDelete: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/SystemPermissionBulkDelete/content/application\/json`.
            case json(Components.Schemas.SystemPermissionBulkDelete)
        }
        /// - Remark: Generated from `#/components/requestBodies/SystemPermissionUpdate`.
        @frozen public enum SystemPermissionUpdate: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/SystemPermissionUpdate/content/application\/json`.
            case json(Components.Schemas.SystemPermissionUpdate)
        }
        /// - Remark: Generated from `#/components/requestBodies/SystemPermissionPatch`.
        @frozen public enum SystemPermissionPatch: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/SystemPermissionPatch/content/application\/json`.
            case json(Components.Schemas.SystemPermissionPatch)
        }
    }
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct FeatherCoreUnsupportedMediaType: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreUnsupportedMediaType/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreUnsupportedMediaType/content/application\/json`.
                case json(Components.Schemas.FeatherCoreUnsupportedMediaTypeError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreUnsupportedMediaTypeError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreUnsupportedMediaType.Body
            /// Creates a new `FeatherCoreUnsupportedMediaType`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreUnsupportedMediaType.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreHead: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreHead/headers`.
            public struct Headers: Sendable, Hashable {
                /// Content length header
                ///
                /// - Remark: Generated from `#/components/responses/FeatherCoreHead/headers/Content-Length`.
                public var Content_hyphen_Length: Components.Headers.Content_hyphen_Length?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Content_hyphen_Length: Content length header
                public init(Content_hyphen_Length: Components.Headers.Content_hyphen_Length? = nil) {
                    self.Content_hyphen_Length = Content_hyphen_Length
                }
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.FeatherCoreHead.Headers
            /// Creates a new `FeatherCoreHead`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            public init(headers: Components.Responses.FeatherCoreHead.Headers = .init()) {
                self.headers = headers
            }
        }
        public struct FeatherCoreNoContent: Sendable, Hashable {
            /// Creates a new `FeatherCoreNoContent`.
            public init() {}
        }
        public struct FeatherCoreInternalServerError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreInternalServerError/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreInternalServerError/content/application\/json`.
                case json(Components.Schemas.FeatherCoreInternalServerErrorError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreInternalServerErrorError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreInternalServerError.Body
            /// Creates a new `FeatherCoreInternalServerError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreInternalServerError.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreOk: Sendable, Hashable {
            /// Creates a new `FeatherCoreOk`.
            public init() {}
        }
        public struct FeatherCoreGone: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreGone/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreGone/content/application\/json`.
                case json(Components.Schemas.FeatherCoreGoneError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreGoneError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreGone.Body
            /// Creates a new `FeatherCoreGone`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreGone.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreNotAcceptable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreNotAcceptable/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreNotAcceptable/content/application\/json`.
                case json(Components.Schemas.FeatherCoreNotAcceptableError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreNotAcceptableError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreNotAcceptable.Body
            /// Creates a new `FeatherCoreNotAcceptable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreNotAcceptable.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreMethodNotAllowed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreMethodNotAllowed/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreMethodNotAllowed/content/application\/json`.
                case json(Components.Schemas.FeatherCoreMethodNotAllowedError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreMethodNotAllowedError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreMethodNotAllowed.Body
            /// Creates a new `FeatherCoreMethodNotAllowed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreMethodNotAllowed.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreNotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreNotFound/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreNotFound/content/application\/json`.
                case json(Components.Schemas.FeatherCoreNotFoundError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreNotFoundError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreNotFound.Body
            /// Creates a new `FeatherCoreNotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreNotFound.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreBadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreBadRequest/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreBadRequest/content/application\/json`.
                case json(Components.Schemas.FeatherCoreBadRequestError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreBadRequestError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreBadRequest.Body
            /// Creates a new `FeatherCoreBadRequest`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreBadRequest.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreUnprocessableContent: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreUnprocessableContent/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreUnprocessableContent/content/application\/json`.
                case json(Components.Schemas.FeatherCoreUnprocessableContentError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreUnprocessableContentError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreUnprocessableContent.Body
            /// Creates a new `FeatherCoreUnprocessableContent`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreUnprocessableContent.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreUnauthorized: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreUnauthorized/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreUnauthorized/content/application\/json`.
                case json(Components.Schemas.FeatherCoreUnauthorizedError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreUnauthorizedError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreUnauthorized.Body
            /// Creates a new `FeatherCoreUnauthorized`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreUnauthorized.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreConflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreConflict/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreConflict/content/application\/json`.
                case json(Components.Schemas.FeatherCoreConflictError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreConflictError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreConflict.Body
            /// Creates a new `FeatherCoreConflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreConflict.Body) {
                self.body = body
            }
        }
        public struct FeatherCoreForbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatherCoreForbidden/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/FeatherCoreForbidden/content/application\/json`.
                case json(Components.Schemas.FeatherCoreForbiddenError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.FeatherCoreForbiddenError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatherCoreForbidden.Body
            /// Creates a new `FeatherCoreForbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatherCoreForbidden.Body) {
                self.body = body
            }
        }
        public struct SystemVariableList: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/SystemVariableList/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/SystemVariableList/content/application\/json`.
                case json(Components.Schemas.SystemVariableList)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.SystemVariableList {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.SystemVariableList.Body
            /// Creates a new `SystemVariableList`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.SystemVariableList.Body) {
                self.body = body
            }
        }
        public struct SystemVariableDetail: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/SystemVariableDetail/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/SystemVariableDetail/content/application\/json`.
                case json(Components.Schemas.SystemVariableDetail)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.SystemVariableDetail {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.SystemVariableDetail.Body
            /// Creates a new `SystemVariableDetail`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.SystemVariableDetail.Body) {
                self.body = body
            }
        }
        public struct SystemPermissionList: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/SystemPermissionList/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/SystemPermissionList/content/application\/json`.
                case json(Components.Schemas.SystemPermissionList)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.SystemPermissionList {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.SystemPermissionList.Body
            /// Creates a new `SystemPermissionList`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.SystemPermissionList.Body) {
                self.body = body
            }
        }
        public struct SystemPermissionDetail: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/SystemPermissionDetail/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/SystemPermissionDetail/content/application\/json`.
                case json(Components.Schemas.SystemPermissionDetail)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.SystemPermissionDetail {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.SystemPermissionDetail.Body
            /// Creates a new `SystemPermissionDetail`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.SystemPermissionDetail.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {
        /// Content length header
        ///
        /// - Remark: Generated from `#/components/headers/Content-Length`.
        public typealias Content_hyphen_Length = Components.Schemas.FeatherCoreHeadersContentLength
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List system variables
    ///
    /// List available system variables
    ///
    /// - Remark: HTTP `GET /system/variables`.
    /// - Remark: Generated from `#/paths//system/variables/get(listSystemVariable)`.
    public enum listSystemVariable {
        public static let id: Swift.String = "listSystemVariable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/variables/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Sort by parameter
                ///
                /// - Remark: Generated from `#/paths/system/variables/GET/query/sort`.
                public var sort: Components.Parameters.SystemVariableListSort?
                /// The list search value
                ///
                /// - Remark: Generated from `#/paths/system/variables/GET/query/search`.
                public var search: Components.Parameters.FeatherCoreListSearch?
                /// The number of items per page
                ///
                /// - Remark: Generated from `#/paths/system/variables/GET/query/pageSize`.
                public var pageSize: Components.Parameters.FeatherCoreListPageSize?
                /// The current page number
                ///
                /// - Remark: Generated from `#/paths/system/variables/GET/query/pageIndex`.
                public var pageIndex: Components.Parameters.FeatherCoreListPageIndex?
                /// Sort order parameter
                ///
                /// - Remark: Generated from `#/paths/system/variables/GET/query/order`.
                public var order: Components.Parameters.FeatherCoreListOrder?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort: Sort by parameter
                ///   - search: The list search value
                ///   - pageSize: The number of items per page
                ///   - pageIndex: The current page number
                ///   - order: Sort order parameter
                public init(
                    sort: Components.Parameters.SystemVariableListSort? = nil,
                    search: Components.Parameters.FeatherCoreListSearch? = nil,
                    pageSize: Components.Parameters.FeatherCoreListPageSize? = nil,
                    pageIndex: Components.Parameters.FeatherCoreListPageIndex? = nil,
                    order: Components.Parameters.FeatherCoreListOrder? = nil
                ) {
                    self.sort = sort
                    self.search = search
                    self.pageSize = pageSize
                    self.pageIndex = pageIndex
                    self.order = order
                }
            }
            public var query: Operations.listSystemVariable.Input.Query
            /// - Remark: Generated from `#/paths/system/variables/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listSystemVariable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listSystemVariable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listSystemVariable.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.listSystemVariable.Input.Query = .init(),
                headers: Operations.listSystemVariable.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// System variable list object
            ///
            /// - Remark: Generated from `#/paths//system/variables/get(listSystemVariable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SystemVariableList)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.SystemVariableList {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//system/variables/get(listSystemVariable)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.FeatherCoreBadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.FeatherCoreBadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unsupported media type
            ///
            /// - Remark: Generated from `#/paths//system/variables/get(listSystemVariable)/responses/415`.
            ///
            /// HTTP response code: `415 unsupportedMediaType`.
            case unsupportedMediaType(Components.Responses.FeatherCoreUnsupportedMediaType)
            /// The associated value of the enum case if `self` is `.unsupportedMediaType`.
            ///
            /// - Throws: An error if `self` is not `.unsupportedMediaType`.
            /// - SeeAlso: `.unsupportedMediaType`.
            public var unsupportedMediaType: Components.Responses.FeatherCoreUnsupportedMediaType {
                get throws {
                    switch self {
                    case let .unsupportedMediaType(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unsupportedMediaType",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//system/variables/get(listSystemVariable)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.FeatherCoreUnauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.FeatherCoreUnauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//system/variables/get(listSystemVariable)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.FeatherCoreForbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.FeatherCoreForbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a system variable
    ///
    /// Creates a new system variable
    ///
    /// - Remark: HTTP `POST /system/variables`.
    /// - Remark: Generated from `#/paths//system/variables/post(createSystemVariable)`.
    public enum createSystemVariable {
        public static let id: Swift.String = "createSystemVariable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/variables/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createSystemVariable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createSystemVariable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createSystemVariable.Input.Headers
            /// - Remark: Generated from `#/paths/system/variables/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/variables/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SystemVariableCreate)
            }
            public var body: Operations.createSystemVariable.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createSystemVariable.Input.Headers = .init(),
                body: Operations.createSystemVariable.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// System variable detail object
            ///
            /// - Remark: Generated from `#/paths//system/variables/post(createSystemVariable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SystemVariableDetail)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.SystemVariableDetail {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//system/variables/post(createSystemVariable)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.FeatherCoreBadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.FeatherCoreBadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//system/variables/post(createSystemVariable)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.FeatherCoreUnauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.FeatherCoreUnauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//system/variables/post(createSystemVariable)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.FeatherCoreForbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.FeatherCoreForbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Unsupported media type
            ///
            /// - Remark: Generated from `#/paths//system/variables/post(createSystemVariable)/responses/415`.
            ///
            /// HTTP response code: `415 unsupportedMediaType`.
            case unsupportedMediaType(Components.Responses.FeatherCoreUnsupportedMediaType)
            /// The associated value of the enum case if `self` is `.unsupportedMediaType`.
            ///
            /// - Throws: An error if `self` is not `.unsupportedMediaType`.
            /// - SeeAlso: `.unsupportedMediaType`.
            public var unsupportedMediaType: Components.Responses.FeatherCoreUnsupportedMediaType {
                get throws {
                    switch self {
                    case let .unsupportedMediaType(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unsupportedMediaType",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable content
            ///
            /// - Remark: Generated from `#/paths//system/variables/post(createSystemVariable)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.FeatherCoreUnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.FeatherCoreUnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Bulk delete system variables
    ///
    /// Bulk delete system variables using identifiers
    ///
    /// - Remark: HTTP `DELETE /system/variables`.
    /// - Remark: Generated from `#/paths//system/variables/delete(bulkDeleteSystemVariable)`.
    public enum bulkDeleteSystemVariable {
        public static let id: Swift.String = "bulkDeleteSystemVariable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/variables/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkDeleteSystemVariable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkDeleteSystemVariable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.bulkDeleteSystemVariable.Input.Headers
            /// - Remark: Generated from `#/paths/system/variables/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/variables/DELETE/requestBody/content/application\/json`.
                case json(Components.Schemas.SystemVariableBulkDelete)
            }
            public var body: Operations.bulkDeleteSystemVariable.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.bulkDeleteSystemVariable.Input.Headers = .init(),
                body: Operations.bulkDeleteSystemVariable.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// No content
            ///
            /// - Remark: Generated from `#/paths//system/variables/delete(bulkDeleteSystemVariable)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.FeatherCoreNoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.FeatherCoreNoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//system/variables/delete(bulkDeleteSystemVariable)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.FeatherCoreBadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.FeatherCoreBadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//system/variables/delete(bulkDeleteSystemVariable)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.FeatherCoreUnauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.FeatherCoreUnauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//system/variables/delete(bulkDeleteSystemVariable)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.FeatherCoreForbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.FeatherCoreForbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//system/variables/delete(bulkDeleteSystemVariable)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.FeatherCoreNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.FeatherCoreNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Unsupported media type
            ///
            /// - Remark: Generated from `#/paths//system/variables/delete(bulkDeleteSystemVariable)/responses/415`.
            ///
            /// HTTP response code: `415 unsupportedMediaType`.
            case unsupportedMediaType(Components.Responses.FeatherCoreUnsupportedMediaType)
            /// The associated value of the enum case if `self` is `.unsupportedMediaType`.
            ///
            /// - Throws: An error if `self` is not `.unsupportedMediaType`.
            /// - SeeAlso: `.unsupportedMediaType`.
            public var unsupportedMediaType: Components.Responses.FeatherCoreUnsupportedMediaType {
                get throws {
                    switch self {
                    case let .unsupportedMediaType(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unsupportedMediaType",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable content
            ///
            /// - Remark: Generated from `#/paths//system/variables/delete(bulkDeleteSystemVariable)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.FeatherCoreUnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.FeatherCoreUnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// System variable details
    ///
    /// Get the details of a system variable
    ///
    /// - Remark: HTTP `GET /system/variables/{key}`.
    /// - Remark: Generated from `#/paths//system/variables/{key}/get(getSystemVariable)`.
    public enum getSystemVariable {
        public static let id: Swift.String = "getSystemVariable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/variables/{key}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// System variable key
                ///
                /// - Remark: Generated from `#/paths/system/variables/{key}/GET/path/key`.
                public var key: Components.Parameters.SystemVariableKey
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - key: System variable key
                public init(key: Components.Parameters.SystemVariableKey) {
                    self.key = key
                }
            }
            public var path: Operations.getSystemVariable.Input.Path
            /// - Remark: Generated from `#/paths/system/variables/{key}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSystemVariable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSystemVariable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getSystemVariable.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getSystemVariable.Input.Path,
                headers: Operations.getSystemVariable.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// System variable detail object
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/get(getSystemVariable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SystemVariableDetail)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.SystemVariableDetail {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/get(getSystemVariable)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.FeatherCoreBadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.FeatherCoreBadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/get(getSystemVariable)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.FeatherCoreUnauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.FeatherCoreUnauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/get(getSystemVariable)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.FeatherCoreForbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.FeatherCoreForbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/get(getSystemVariable)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.FeatherCoreNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.FeatherCoreNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Patch a system variable
    ///
    /// Patches a system variable using an identifier
    ///
    /// - Remark: HTTP `PATCH /system/variables/{key}`.
    /// - Remark: Generated from `#/paths//system/variables/{key}/patch(patchSystemVariable)`.
    public enum patchSystemVariable {
        public static let id: Swift.String = "patchSystemVariable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/variables/{key}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// System variable key
                ///
                /// - Remark: Generated from `#/paths/system/variables/{key}/PATCH/path/key`.
                public var key: Components.Parameters.SystemVariableKey
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - key: System variable key
                public init(key: Components.Parameters.SystemVariableKey) {
                    self.key = key
                }
            }
            public var path: Operations.patchSystemVariable.Input.Path
            /// - Remark: Generated from `#/paths/system/variables/{key}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchSystemVariable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchSystemVariable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.patchSystemVariable.Input.Headers
            /// - Remark: Generated from `#/paths/system/variables/{key}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/variables/{key}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.SystemVariablePatch)
            }
            public var body: Operations.patchSystemVariable.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.patchSystemVariable.Input.Path,
                headers: Operations.patchSystemVariable.Input.Headers = .init(),
                body: Operations.patchSystemVariable.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// System variable detail object
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/patch(patchSystemVariable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SystemVariableDetail)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.SystemVariableDetail {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/patch(patchSystemVariable)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.FeatherCoreBadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.FeatherCoreBadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/patch(patchSystemVariable)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.FeatherCoreUnauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.FeatherCoreUnauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/patch(patchSystemVariable)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.FeatherCoreForbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.FeatherCoreForbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/patch(patchSystemVariable)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.FeatherCoreNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.FeatherCoreNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Unsupported media type
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/patch(patchSystemVariable)/responses/415`.
            ///
            /// HTTP response code: `415 unsupportedMediaType`.
            case unsupportedMediaType(Components.Responses.FeatherCoreUnsupportedMediaType)
            /// The associated value of the enum case if `self` is `.unsupportedMediaType`.
            ///
            /// - Throws: An error if `self` is not `.unsupportedMediaType`.
            /// - SeeAlso: `.unsupportedMediaType`.
            public var unsupportedMediaType: Components.Responses.FeatherCoreUnsupportedMediaType {
                get throws {
                    switch self {
                    case let .unsupportedMediaType(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unsupportedMediaType",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable content
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/patch(patchSystemVariable)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.FeatherCoreUnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.FeatherCoreUnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a system variable
    ///
    /// Updates a system variable using an identifier
    ///
    /// - Remark: HTTP `PUT /system/variables/{key}`.
    /// - Remark: Generated from `#/paths//system/variables/{key}/put(updateSystemVariable)`.
    public enum updateSystemVariable {
        public static let id: Swift.String = "updateSystemVariable"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/variables/{key}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// System variable key
                ///
                /// - Remark: Generated from `#/paths/system/variables/{key}/PUT/path/key`.
                public var key: Components.Parameters.SystemVariableKey
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - key: System variable key
                public init(key: Components.Parameters.SystemVariableKey) {
                    self.key = key
                }
            }
            public var path: Operations.updateSystemVariable.Input.Path
            /// - Remark: Generated from `#/paths/system/variables/{key}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updateSystemVariable.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updateSystemVariable.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.updateSystemVariable.Input.Headers
            /// - Remark: Generated from `#/paths/system/variables/{key}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/variables/{key}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.SystemVariableUpdate)
            }
            public var body: Operations.updateSystemVariable.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.updateSystemVariable.Input.Path,
                headers: Operations.updateSystemVariable.Input.Headers = .init(),
                body: Operations.updateSystemVariable.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// System variable detail object
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/put(updateSystemVariable)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SystemVariableDetail)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.SystemVariableDetail {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/put(updateSystemVariable)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.FeatherCoreBadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.FeatherCoreBadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/put(updateSystemVariable)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.FeatherCoreUnauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.FeatherCoreUnauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/put(updateSystemVariable)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.FeatherCoreForbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.FeatherCoreForbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/put(updateSystemVariable)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.FeatherCoreNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.FeatherCoreNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Unsupported media type
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/put(updateSystemVariable)/responses/415`.
            ///
            /// HTTP response code: `415 unsupportedMediaType`.
            case unsupportedMediaType(Components.Responses.FeatherCoreUnsupportedMediaType)
            /// The associated value of the enum case if `self` is `.unsupportedMediaType`.
            ///
            /// - Throws: An error if `self` is not `.unsupportedMediaType`.
            /// - SeeAlso: `.unsupportedMediaType`.
            public var unsupportedMediaType: Components.Responses.FeatherCoreUnsupportedMediaType {
                get throws {
                    switch self {
                    case let .unsupportedMediaType(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unsupportedMediaType",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable content
            ///
            /// - Remark: Generated from `#/paths//system/variables/{key}/put(updateSystemVariable)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.FeatherCoreUnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.FeatherCoreUnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List system permissions
    ///
    /// List available system permissions
    ///
    /// - Remark: HTTP `GET /system/permissions`.
    /// - Remark: Generated from `#/paths//system/permissions/get(listSystemPermission)`.
    public enum listSystemPermission {
        public static let id: Swift.String = "listSystemPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/permissions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Sort by parameter
                ///
                /// - Remark: Generated from `#/paths/system/permissions/GET/query/sort`.
                public var sort: Components.Parameters.SystemPermissionListSort?
                /// The list search value
                ///
                /// - Remark: Generated from `#/paths/system/permissions/GET/query/search`.
                public var search: Components.Parameters.FeatherCoreListSearch?
                /// The number of items per page
                ///
                /// - Remark: Generated from `#/paths/system/permissions/GET/query/pageSize`.
                public var pageSize: Components.Parameters.FeatherCoreListPageSize?
                /// The current page number
                ///
                /// - Remark: Generated from `#/paths/system/permissions/GET/query/pageIndex`.
                public var pageIndex: Components.Parameters.FeatherCoreListPageIndex?
                /// Sort order parameter
                ///
                /// - Remark: Generated from `#/paths/system/permissions/GET/query/order`.
                public var order: Components.Parameters.FeatherCoreListOrder?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sort: Sort by parameter
                ///   - search: The list search value
                ///   - pageSize: The number of items per page
                ///   - pageIndex: The current page number
                ///   - order: Sort order parameter
                public init(
                    sort: Components.Parameters.SystemPermissionListSort? = nil,
                    search: Components.Parameters.FeatherCoreListSearch? = nil,
                    pageSize: Components.Parameters.FeatherCoreListPageSize? = nil,
                    pageIndex: Components.Parameters.FeatherCoreListPageIndex? = nil,
                    order: Components.Parameters.FeatherCoreListOrder? = nil
                ) {
                    self.sort = sort
                    self.search = search
                    self.pageSize = pageSize
                    self.pageIndex = pageIndex
                    self.order = order
                }
            }
            public var query: Operations.listSystemPermission.Input.Query
            /// - Remark: Generated from `#/paths/system/permissions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listSystemPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listSystemPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.listSystemPermission.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.listSystemPermission.Input.Query = .init(),
                headers: Operations.listSystemPermission.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// System Permission list object
            ///
            /// - Remark: Generated from `#/paths//system/permissions/get(listSystemPermission)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SystemPermissionList)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.SystemPermissionList {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//system/permissions/get(listSystemPermission)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.FeatherCoreBadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.FeatherCoreBadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//system/permissions/get(listSystemPermission)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.FeatherCoreUnauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.FeatherCoreUnauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//system/permissions/get(listSystemPermission)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.FeatherCoreForbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.FeatherCoreForbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a system permission
    ///
    /// Creates a new system permission
    ///
    /// - Remark: HTTP `POST /system/permissions`.
    /// - Remark: Generated from `#/paths//system/permissions/post(createSystemPermission)`.
    public enum createSystemPermission {
        public static let id: Swift.String = "createSystemPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/permissions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createSystemPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createSystemPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createSystemPermission.Input.Headers
            /// - Remark: Generated from `#/paths/system/permissions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/permissions/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SystemPermissionCreate)
            }
            public var body: Operations.createSystemPermission.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createSystemPermission.Input.Headers = .init(),
                body: Operations.createSystemPermission.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// System Permission detail object
            ///
            /// - Remark: Generated from `#/paths//system/permissions/post(createSystemPermission)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SystemPermissionDetail)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.SystemPermissionDetail {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//system/permissions/post(createSystemPermission)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.FeatherCoreBadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.FeatherCoreBadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//system/permissions/post(createSystemPermission)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.FeatherCoreUnauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.FeatherCoreUnauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//system/permissions/post(createSystemPermission)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.FeatherCoreForbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.FeatherCoreForbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Unsupported media type
            ///
            /// - Remark: Generated from `#/paths//system/permissions/post(createSystemPermission)/responses/415`.
            ///
            /// HTTP response code: `415 unsupportedMediaType`.
            case unsupportedMediaType(Components.Responses.FeatherCoreUnsupportedMediaType)
            /// The associated value of the enum case if `self` is `.unsupportedMediaType`.
            ///
            /// - Throws: An error if `self` is not `.unsupportedMediaType`.
            /// - SeeAlso: `.unsupportedMediaType`.
            public var unsupportedMediaType: Components.Responses.FeatherCoreUnsupportedMediaType {
                get throws {
                    switch self {
                    case let .unsupportedMediaType(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unsupportedMediaType",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable content
            ///
            /// - Remark: Generated from `#/paths//system/permissions/post(createSystemPermission)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.FeatherCoreUnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.FeatherCoreUnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Bulk delete system permissions
    ///
    /// Removes multiple system permissions at once
    ///
    /// - Remark: HTTP `DELETE /system/permissions`.
    /// - Remark: Generated from `#/paths//system/permissions/delete(bulkDeleteSystemPermission)`.
    public enum bulkDeleteSystemPermission {
        public static let id: Swift.String = "bulkDeleteSystemPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/permissions/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkDeleteSystemPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.bulkDeleteSystemPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.bulkDeleteSystemPermission.Input.Headers
            /// - Remark: Generated from `#/paths/system/permissions/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/permissions/DELETE/requestBody/content/application\/json`.
                case json(Components.Schemas.SystemPermissionBulkDelete)
            }
            public var body: Operations.bulkDeleteSystemPermission.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.bulkDeleteSystemPermission.Input.Headers = .init(),
                body: Operations.bulkDeleteSystemPermission.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// No content
            ///
            /// - Remark: Generated from `#/paths//system/permissions/delete(bulkDeleteSystemPermission)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Components.Responses.FeatherCoreNoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Components.Responses.FeatherCoreNoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//system/permissions/delete(bulkDeleteSystemPermission)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.FeatherCoreBadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.FeatherCoreBadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//system/permissions/delete(bulkDeleteSystemPermission)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.FeatherCoreUnauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.FeatherCoreUnauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//system/permissions/delete(bulkDeleteSystemPermission)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.FeatherCoreForbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.FeatherCoreForbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//system/permissions/delete(bulkDeleteSystemPermission)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.FeatherCoreNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.FeatherCoreNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Unsupported media type
            ///
            /// - Remark: Generated from `#/paths//system/permissions/delete(bulkDeleteSystemPermission)/responses/415`.
            ///
            /// HTTP response code: `415 unsupportedMediaType`.
            case unsupportedMediaType(Components.Responses.FeatherCoreUnsupportedMediaType)
            /// The associated value of the enum case if `self` is `.unsupportedMediaType`.
            ///
            /// - Throws: An error if `self` is not `.unsupportedMediaType`.
            /// - SeeAlso: `.unsupportedMediaType`.
            public var unsupportedMediaType: Components.Responses.FeatherCoreUnsupportedMediaType {
                get throws {
                    switch self {
                    case let .unsupportedMediaType(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unsupportedMediaType",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable content
            ///
            /// - Remark: Generated from `#/paths//system/permissions/delete(bulkDeleteSystemPermission)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.FeatherCoreUnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.FeatherCoreUnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// System permission details
    ///
    /// Get the details of a system permission
    ///
    /// - Remark: HTTP `GET /system/permissions/{permissionKey}`.
    /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/get(detailSystemPermission)`.
    public enum detailSystemPermission {
        public static let id: Swift.String = "detailSystemPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// System permission key
                ///
                /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/GET/path/permissionKey`.
                public var permissionKey: Components.Parameters.SystemPermissionKey
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - permissionKey: System permission key
                public init(permissionKey: Components.Parameters.SystemPermissionKey) {
                    self.permissionKey = permissionKey
                }
            }
            public var path: Operations.detailSystemPermission.Input.Path
            /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.detailSystemPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.detailSystemPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.detailSystemPermission.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.detailSystemPermission.Input.Path,
                headers: Operations.detailSystemPermission.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// System Permission detail object
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/get(detailSystemPermission)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SystemPermissionDetail)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.SystemPermissionDetail {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/get(detailSystemPermission)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.FeatherCoreBadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.FeatherCoreBadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/get(detailSystemPermission)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.FeatherCoreUnauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.FeatherCoreUnauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/get(detailSystemPermission)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.FeatherCoreForbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.FeatherCoreForbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/get(detailSystemPermission)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.FeatherCoreNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.FeatherCoreNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Patch a System Permission
    ///
    /// Patch a given System Permission
    ///
    /// - Remark: HTTP `PATCH /system/permissions/{permissionKey}`.
    /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/patch(patchSystemPermission)`.
    public enum patchSystemPermission {
        public static let id: Swift.String = "patchSystemPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// System permission key
                ///
                /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/PATCH/path/permissionKey`.
                public var permissionKey: Components.Parameters.SystemPermissionKey
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - permissionKey: System permission key
                public init(permissionKey: Components.Parameters.SystemPermissionKey) {
                    self.permissionKey = permissionKey
                }
            }
            public var path: Operations.patchSystemPermission.Input.Path
            /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchSystemPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.patchSystemPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.patchSystemPermission.Input.Headers
            /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.SystemPermissionPatch)
            }
            public var body: Operations.patchSystemPermission.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.patchSystemPermission.Input.Path,
                headers: Operations.patchSystemPermission.Input.Headers = .init(),
                body: Operations.patchSystemPermission.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// System Permission detail object
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/patch(patchSystemPermission)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SystemPermissionDetail)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.SystemPermissionDetail {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/patch(patchSystemPermission)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.FeatherCoreBadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.FeatherCoreBadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/patch(patchSystemPermission)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.FeatherCoreUnauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.FeatherCoreUnauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/patch(patchSystemPermission)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.FeatherCoreForbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.FeatherCoreForbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/patch(patchSystemPermission)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.FeatherCoreNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.FeatherCoreNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Unsupported media type
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/patch(patchSystemPermission)/responses/415`.
            ///
            /// HTTP response code: `415 unsupportedMediaType`.
            case unsupportedMediaType(Components.Responses.FeatherCoreUnsupportedMediaType)
            /// The associated value of the enum case if `self` is `.unsupportedMediaType`.
            ///
            /// - Throws: An error if `self` is not `.unsupportedMediaType`.
            /// - SeeAlso: `.unsupportedMediaType`.
            public var unsupportedMediaType: Components.Responses.FeatherCoreUnsupportedMediaType {
                get throws {
                    switch self {
                    case let .unsupportedMediaType(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unsupportedMediaType",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable content
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/patch(patchSystemPermission)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.FeatherCoreUnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.FeatherCoreUnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a system permission
    ///
    /// Updates a system permission
    ///
    /// - Remark: HTTP `PUT /system/permissions/{permissionKey}`.
    /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/put(updateSystemPermission)`.
    public enum updateSystemPermission {
        public static let id: Swift.String = "updateSystemPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// System permission key
                ///
                /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/PUT/path/permissionKey`.
                public var permissionKey: Components.Parameters.SystemPermissionKey
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - permissionKey: System permission key
                public init(permissionKey: Components.Parameters.SystemPermissionKey) {
                    self.permissionKey = permissionKey
                }
            }
            public var path: Operations.updateSystemPermission.Input.Path
            /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updateSystemPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.updateSystemPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.updateSystemPermission.Input.Headers
            /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/system/permissions/{permissionKey}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.SystemPermissionUpdate)
            }
            public var body: Operations.updateSystemPermission.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.updateSystemPermission.Input.Path,
                headers: Operations.updateSystemPermission.Input.Headers = .init(),
                body: Operations.updateSystemPermission.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// System Permission detail object
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/put(updateSystemPermission)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SystemPermissionDetail)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.SystemPermissionDetail {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/put(updateSystemPermission)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.FeatherCoreBadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.FeatherCoreBadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/put(updateSystemPermission)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.FeatherCoreUnauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.FeatherCoreUnauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/put(updateSystemPermission)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.FeatherCoreForbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.FeatherCoreForbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/put(updateSystemPermission)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.FeatherCoreNotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.FeatherCoreNotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Unsupported media type
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/put(updateSystemPermission)/responses/415`.
            ///
            /// HTTP response code: `415 unsupportedMediaType`.
            case unsupportedMediaType(Components.Responses.FeatherCoreUnsupportedMediaType)
            /// The associated value of the enum case if `self` is `.unsupportedMediaType`.
            ///
            /// - Throws: An error if `self` is not `.unsupportedMediaType`.
            /// - SeeAlso: `.unsupportedMediaType`.
            public var unsupportedMediaType: Components.Responses.FeatherCoreUnsupportedMediaType {
                get throws {
                    switch self {
                    case let .unsupportedMediaType(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unsupportedMediaType",
                            response: self
                        )
                    }
                }
            }
            /// Unprocessable content
            ///
            /// - Remark: Generated from `#/paths//system/permissions/{permissionKey}/put(updateSystemPermission)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.FeatherCoreUnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Components.Responses.FeatherCoreUnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
